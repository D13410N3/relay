(function() {var implementors = {};
implementors["relay_cabi"] = [{"text":"impl From&lt;String&gt; for RelayStr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for RelayStr","synthetic":false,"types":[]},{"text":"impl From&lt;Uuid&gt; for RelayUuid","synthetic":false,"types":[]}];
implementors["relay_common"] = [{"text":"impl From&lt;EventType&gt; for DataCategory","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Glob","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Glob","synthetic":false,"types":[]}];
implementors["relay_config"] = [{"text":"impl From&lt;u32&gt; for ByteSize","synthetic":false,"types":[]}];
implementors["relay_filter"] = [{"text":"impl From&lt;&amp;'_ str&gt; for SchemeDomainPort","synthetic":false,"types":[]}];
implementors["relay_general"] = [{"text":"impl From&lt;&amp;'static str&gt; for Pattern","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromIntError&gt; for ScrubMinidumpError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ScrubMinidumpError","synthetic":false,"types":[]},{"text":"impl From&lt;Utf16Error&gt; for ScrubMinidumpError","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Error&gt; for ScrubMinidumpError","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for ReplaceRedaction","synthetic":false,"types":[]},{"text":"impl From&lt;ValueType&gt; for SelectorSpec","synthetic":false,"types":[]},{"text":"impl From&lt;Context&gt; for ContextInner","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;String&gt;&gt; From&lt;T&gt; for NativeImagePath","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for DebugId <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DebugId: From&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for CodeId <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeId: From&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Value&gt;&gt; From&lt;T&gt; for ExtraValue","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;String, Global&gt;&gt; for Fingerprint","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for LogEntry","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Message","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;BTreeMap&lt;String, Annotated&lt;Value&gt;&gt;&gt; for FrameVars","synthetic":false,"types":[]},{"text":"impl From&lt;RawStacktrace&gt; for Stacktrace","synthetic":false,"types":[]},{"text":"impl From&lt;Stacktrace&gt; for RawStacktrace","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Vec&lt;Annotated&lt;T&gt;, Global&gt;&gt; for PairList&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;IpAddr&gt; for IpAddr","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for LenientString","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for JsonLenientString","synthetic":false,"types":[]},{"text":"impl From&lt;DateTime&lt;Utc&gt;&gt; for Timestamp","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Annotated&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Option&lt;T&gt;&gt; for Annotated&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for ErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for ErrorKind","synthetic":false,"types":[]},{"text":"impl From&lt;ErrorKind&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Value&gt; for Annotated&lt;Value&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Value&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Annotated&lt;Value&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;Annotated&lt;Value&gt;, Global&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;BTreeMap&lt;String, Annotated&lt;Value&gt;&gt;&gt; for Value","synthetic":false,"types":[]}];
implementors["relay_server"] = [{"text":"impl From&lt;Context&lt;ServerErrorKind&gt;&gt; for ServerError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()