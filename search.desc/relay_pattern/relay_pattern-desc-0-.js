searchState.loadedDescShard("relay_pattern", 0, "A glob like pattern used throught Relay and its APIs.\nConfigures the pattern to match case insensitive.\nConfigures the pattern to match case insensitive.\nThe default pattern but with case insensitive matching.\nThe default pattern.\nPattern parsing error.\nConfigures the maximum allowed complexity of the pattern.\nConfigures the maximum allowed complexity of the pattern.\n<code>Pattern</code> represents a successfully parsed Relay pattern.\nA builder for a <code>Pattern</code>.\nCompile time configuration for a <code>TypedPattern</code>.\nA collection of <code>Pattern</code>s sharing the same configuration.\nA builder for a collection of <code>Patterns</code>.\nA <code>PatternsBuilder</code> with all options configured.\nA <code>Pattern</code> with compile time encoded <code>PatternConfig</code>.\n<code>Patterns</code> with a compile time configured <code>PatternConfig</code>.\nAdds a pattern to the builder.\nAdds a pattern to the builder and returns the resulting …\nAdds a pattern to the builder.\nBuilds a <code>TypedPatterns</code> from the contained patterns.\nBuild a new <code>Pattern</code> from the passed pattern and configured …\nBuilds a <code>Patterns</code> from the contained patterns.\nCreate a new <code>PatternBuilder</code>. The builder can be used to …\nReturns a <code>PatternsBuilder</code>.\nIf enabled matches the pattern case insensitive.\nIf enabled matches the pattern case insensitive.\nCreates an empty <code>Patterns</code> instance which never matches …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this instance contains no patterns.\nReturns <code>true</code> if the pattern matches the passed string.\nReturns <code>true</code> if any of the contained patterns matches the …\nSets the max complexity for this pattern.\nCreates a new <code>TypedPattern</code> using the provided pattern and …\nCreate a new <code>Pattern</code> from a string with the default …\nReturns a <code>PatternsBuilderConfigured</code> builder which allows …\nBuilds a <code>TypedPatterns</code> from the contained patterns and …\nReturns <code>Patterns</code> containing all added patterns and removes …")